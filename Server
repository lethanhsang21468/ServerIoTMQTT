package MqttServer;

import java.sql.Connection;
import java.sql.PreparedStatement;

import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;

import Option.FuncOption;

public class MqttServer {
	public static final String TOPIC_USER_LOGIN = "house/login/user";
	public static final String TOPIC_HOUSE_REG = "house/register/house";
	public static final String TOPIC_USER_REG = "house/register/user";
	public static final String TOPIC_USER_UPDATE = "house/User/update/user";
	public static final String TOPIC_PASS_UPDATE = "house/User/update/pass";
	public static final String TOPIC_HOUSE_UPDATE = "house/User/update/house";
	public static final String TOPIC_HOUSE_GET = "house/get";
	public static final String TOPIC_USER_DELETE = "house/delete/user";
	public static final String TOPIC_HOUSE_DELETE = "house/delete/house";

	public PreparedStatement statement;
	public Connection sqlConn;

	public static void main(String[] args) {
		MqttServer server = new MqttServer();

		server.run();

	}

	public MqttServer() {

	}

	/* ------------PUBLISH RESPOND TO CLIENT----------------- */
	public void RespondtoClient(String topic, MqttMessage msg) {
		String broker = "tcp://localhost:1883";
		String clientId = MqttClient.generateClientId();

		FuncOption opt = new FuncOption();
		opt.sqlOpen("localhost", "root", "");
		MemoryPersistence persistence = new MemoryPersistence();
		try {
			final MqttClient Server = new MqttClient(broker, clientId, persistence);
			MqttConnectOptions connOpts = new MqttConnectOptions();
			connOpts.setCleanSession(true);

			Server.connect(connOpts);
			Server.publish(topic, msg);
			Server.disconnect();
			// try {
			// Thread.sleep(5000);
			// Server.disconnect();
			//
			// } catch (Exception e) {
			// e.printStackTrace();
			// }

		} catch (Exception me) {

			me.printStackTrace();
		}
	}

	/* Return JSON File to Client */
	public void respond_JSON(String topic, MqttMessage json) throws Exception {
		if (topic != null && topic.equals(topic)) {
			// replyToTopic = new String(json.getPayload());

		}

	}

	/* ------------------RUN PROGRAM------------------ */
	public void run() {
		String broker = "tcp://localhost:1883";
		String clientId = MqttClient.generateClientId();

		FuncOption opt = new FuncOption();
		opt.sqlOpen("localhost", "root", "");
		MemoryPersistence persistence = new MemoryPersistence();
		try {
			final MqttClient Server = new MqttClient(broker, clientId, persistence);
			MqttConnectOptions connOpts = new MqttConnectOptions();
			System.out.println("Connecting to broker: " + broker);
			connOpts.setCleanSession(true);
			connOpts.setKeepAliveInterval(60);

			Server.connect(connOpts);
			System.out.println("Connected");
			/*------------MQTT CALLBACK----------------*/
			Server.setCallback(new MqttCallback() {

				public void connectionLost(Throwable cause) {
					System.out.println("connectionLost-----------1" + cause);
				}

				public void deliveryComplete(IMqttDeliveryToken token) {
					System.out.println("deliveryComplete---------2" + token.isComplete());
				}

				public void messageArrived(String topic, MqttMessage arg1) throws Exception {

					System.out.println("| Message: " + new String(arg1.getPayload()));

					switch (topic) {
					/* ---------------LOGIN USER---------------- */
					case TOPIC_USER_LOGIN:

						String[] login = arg1.toString().split(";");
						if (login.length <= 1)
							break;

						int login_id = opt.Login(login[0], login[1]);
						String Login_ID = Integer.toString(login_id);
						arg1.setPayload(("Gia tri ID login cua ban = " + Login_ID).getBytes());
						RespondtoClient(topic, arg1);

						break;
					/*----------DANG KY THEM MOT NGUOI---------------*/
					case TOPIC_USER_REG:
						System.out.println("user register :" + " UserName_PassWord : " + arg1);
						String[] user = arg1.toString().split(";");
						if (user.length <= 1)
							break;
						int user_id = opt.Register_User(user[0], user[1]);
						String User_ID = Integer.toString(user_id);

						arg1.setPayload(("Gia tri User_ID cua ban  =  " + User_ID).getBytes());
						RespondtoClient(topic, arg1);

						break;

					/*--------------DANG KY THEM MOT NHA MOI------------------*/
					case TOPIC_HOUSE_REG:
						String[] house = arg1.toString().split(";");
						if (house.length <= 1)
							break;
						int house_id = opt.Register_House(house[0], house[1]);
						String House_ID = Integer.toString(house_id);
						System.out.println("Name nha cua ban la :" + house[0]);
						System.out.println("MAC_Add nha cua ban la :" + house[1]);
						arg1.setPayload(("Gia tri  House_ID cua ban  = " + House_ID).getBytes());
						RespondtoClient(topic, arg1);
						break;

					/*-------------UPDATE USERNAME  DUA VAO PASSWORD-------------*/
					case TOPIC_USER_UPDATE:
						String[] up_user = arg1.toString().split(";");
						if (up_user.length <= 1)
							break;

						boolean username = opt.update_User(up_user[0], up_user[1]);
						if (username == true) {
							arg1.setPayload("Ban da update thanh cong ".getBytes());
							RespondtoClient(topic, arg1);
						} else
							arg1.setPayload("Ban da update that bai ".getBytes());
						RespondtoClient(topic, arg1);

						break;

					/*-------------UPDATE PASSWORD  DUA VAO USERNAME-------------*/
					case TOPIC_PASS_UPDATE:
						String[] up_pass = arg1.toString().split(";");
						if (up_pass.length <= 1)
							break;

						boolean pass = opt.update_Password(up_pass[0], up_pass[1]);
						if (pass == true) {
							arg1.setPayload("Ban da update  PassWord thanh cong ".getBytes());
							RespondtoClient(topic, arg1);
						} else
							arg1.setPayload("Ban da update PassWord that bai ".getBytes());
						RespondtoClient(topic, arg1);

						break;
					/*--------DELETE USER BASE ON ID --------------*/
					case TOPIC_USER_DELETE:
						String[] user_del = arg1.toString().split(";");
						if (user_del.length <= 1)
							break;

						boolean del = opt.delete_User(user_del[0], user_del[1]);

						if (del == true) {
							arg1.setPayload("Ban da delete thanh cong ".getBytes());

							RespondtoClient(topic, arg1);
						} else {

							arg1.setPayload("Ban da delete that bai ".getBytes());

							RespondtoClient(topic, arg1);
						}

						break;

					default:

						break;
					}

				}
			});
			Server.subscribe(TOPIC_USER_LOGIN);
			Server.subscribe(TOPIC_HOUSE_REG);
			Server.subscribe(TOPIC_USER_REG);
			Server.subscribe(TOPIC_USER_UPDATE);
			Server.subscribe(TOPIC_PASS_UPDATE);
			Server.subscribe(TOPIC_HOUSE_UPDATE);
			Server.subscribe(TOPIC_HOUSE_GET);
			Server.subscribe(TOPIC_USER_DELETE);
			Server.subscribe(TOPIC_HOUSE_DELETE);

		} catch (Exception me) {

			System.out.println("msg " + me.getMessage());
			System.out.println("loc " + me.getLocalizedMessage());
			System.out.println("cause " + me.getCause());
			System.out.println("excep " + me);
			me.printStackTrace();
		}

	}

}

// sudo apt-get purge --auto-remove mosquitto

