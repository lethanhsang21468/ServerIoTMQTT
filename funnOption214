package pub_sub;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class FuncTionMqtt {

	public PreparedStatement statement;
	public Connection sqlConn;

	public FuncTionMqtt() {

	}

	/**
	 * Open connection to database SQL server.
	 * 
	 * @return -1 Failed. 0 Success.
	 */

	public int sqlOpen(String host, String user, String password) {
		try {
			String myDriver = "org.gjt.mm.mysql.Driver";
			String myUrl = "jdbc:mysql://localhost/REGISTER";
			Class.forName(myDriver);
			sqlConn = DriverManager.getConnection(myUrl, user, password);
		} catch (Exception e) {
			e.printStackTrace();
			return -1;
		}
		return 0;
	}

	/**
	 * Close connection to database SQL server.
	 * 
	 * @return -1 Failed. 0 Success.
	 */
	public int sqlClose() {
		try {
			sqlConn.close();
		} catch (Exception e) {
			e.printStackTrace();
			return -1;
		}
		return 0;
	}

	/**
	 * Delete user base on ID.
	 * 
	 * @return false Failed.
	 * @return true Success.
	 */
	public boolean delete_User(String UserName, String PassWord) throws SQLException {
		PreparedStatement pt = null;

		try {
			sqlConn.setAutoCommit(false);
			String sql = "DELETE FROM Users WHERE UserName = ? AND PassWord = ?";
			pt = sqlConn.prepareStatement(sql);
			pt.setString(1, UserName);
			pt.setString(2, PassWord);
			pt.executeUpdate();
			sqlConn.commit();

		} catch (SQLException ex) {
			ex.printStackTrace();
			sqlConn.rollback();
			return false;
		}
		return true;
	}

	/*
	 * Login de dang nhap dua vao UserName va PassWord
	 * 
	 * @return -1 if Fail
	 * 
	 * @return ID if success
	 */
	public int Login(String UserName, String PassWord) throws SQLException {
		PreparedStatement pt = null;
		int login_ID = 0;
		ResultSet rs = null;
		try {

			sqlConn.setAutoCommit(false);
			String sql = " SELECT * FROM Users WHERE(UserName = ? AND PassWord = ?)";
			pt = sqlConn.prepareStatement(sql);
			pt.setString(1, UserName);
			pt.setString(2, PassWord);
			rs = pt.executeQuery();

			if (rs.next()) {

				String checkUser = rs.getString(2);
				String checkPass = rs.getString(3);

				UserName = rs.getString("UserName").trim();
				PassWord = rs.getString("PassWord").trim();

				if ((checkUser.equals(UserName) && checkPass.equals(PassWord))) {

					login_ID = rs.getInt(1);
					System.out.println(" Ban da dang nhap thanh cong ");

				}

			}

			else {
				System.out.println("Dang nhap that bai, yeu cau nhap lai ");
				return -1;
			}

			sqlConn.commit();

		} catch (SQLException ex) {
			ex.printStackTrace();
			sqlConn.rollback();
			System.out.println("Fail");
			return -1;

		}
		pt.close();

		return login_ID;

	}

	/*
	 * Register User if Username exists , fail
	 * 
	 * @return -1 Fail
	 * 
	 * @return ID User
	 */
	public int Register_User(String UserName, String PassWord) throws SQLException {
		int check_register_user = 1;
		int User_ID = 0;
		PreparedStatement pt = null;
		ResultSet rs = null;
		String sql;
		String sql1;
		try {

			sqlConn.setAutoCommit(false);
			sql = "SELECT * FROM Users WHERE(UserName =? AND PassWord =?)";
			pt = sqlConn.prepareStatement(sql);
			pt.setString(1, UserName);
			pt.setString(2, PassWord);
			rs = pt.executeQuery();

			while (rs.next()) {

				String checkUser = rs.getString(2);
				String checkPass = rs.getString(3);

				UserName = rs.getString(2).trim();
				PassWord = rs.getString(3).trim();
				// if ((checkUser.equals(UserName) &&
				// checkPass.equals(PassWord)) && ((UserName).equals(PassWord))
				// && (checkUser.equals(UserName)) &&
				// (checkPass.equals(PassWord))) {
				if ((checkUser.equals(UserName) && checkPass.equals(PassWord)) || (UserName).equals(PassWord)) {
					check_register_user = 0;

				}

			}
			sqlConn.commit();

		} catch (SQLException ex) {

			ex.printStackTrace();
			sqlConn.rollback();
			return -1;
		}
		pt.close();
		if (check_register_user == 1) {
			// insert

			sql = "INSERT INTO Users(UserName,PassWord) VALUES(?,?)";
			pt = sqlConn.prepareStatement(sql);
			pt.setString(1, UserName);
			pt.setString(2, PassWord);
			pt.executeUpdate();
			sql = "SELECT ID FROM Users WHERE(UserName =? AND PassWord =?)";
			pt = sqlConn.prepareStatement(sql);
			pt.setString(1, UserName);
			pt.setString(2, PassWord);
			rs = pt.executeQuery();

			while (rs.next()) {
				User_ID = rs.getInt(1);
			}
			sqlConn.commit();
		}
		return User_ID;

	}

	/*
	 * Register House
	 * 
	 * @return -1 Fail
	 * 
	 * @return House_ID
	 */
	// public int Register_House(String Name, String MAC_Add) throws
	// SQLException {
	//
	// PreparedStatement pt = null;
	// int House_ID = 0;
	// ResultSet rs = null;
	// try {
	// sqlConn.setAutoCommit(false);
	//
	// String sql = "INSERT INTO Home(Name,MAC_Add) VALUES(?,?)";
	// pt = sqlConn.prepareStatement(sql);
	// pt.setString(1, Name);
	// pt.setString(2, MAC_Add);
	// pt.executeUpdate();
	// sql = "SELECT ID FROM Home WHERE(Name =? AND MAC_Add =?)";
	// pt = sqlConn.prepareStatement(sql);
	// pt.setString(1, Name);
	// pt.setString(2, MAC_Add);
	// rs = pt.executeQuery();
	//
	// while (rs.next()) {
	// House_ID = rs.getInt("ID");
	//
	// }
	// sqlConn.commit();
	//
	// } catch (SQLException ex) {
	// ex.printStackTrace();
	// sqlConn.rollback();
	// System.out.println("Ban nhap sai Name hoac MAC_Add");
	// System.out.println("Please nhap lai Name and MAC_Add");
	// return -1;
	// }
	// pt.close();
	// System.out.println("Ban da dang ky nha thanh cong ");
	//
	// return House_ID;
	// }
	/*
	 * test register house
	 */
	public int Register_House(String Name, String MAC_Add) throws SQLException {
		int check_register_house = 1;
		int Home_ID = 0;
		PreparedStatement pt = null;
		ResultSet rs = null;
		String sql;
		try {

			sqlConn.setAutoCommit(false);
			sql = "SELECT * FROM Home WHERE(Name =? AND MAC_Add =?)";
			pt = sqlConn.prepareStatement(sql);
			pt.setString(1, Name);
			pt.setString(2, MAC_Add);
			rs = pt.executeQuery();

			while (rs.next()) {

				String checkName = rs.getString(2);
				String checkMAC_Add = rs.getString(3);

				Name = rs.getString(2).trim();
				MAC_Add = rs.getString(3).trim();
				// if ((checkUser.equals(UserName) &&
				// checkPass.equals(PassWord)) && ((UserName).equals(PassWord))
				// && (checkUser.equals(UserName)) &&
				// (checkPass.equals(PassWord))) {
				if ((checkName.equals(Name) && checkMAC_Add.equals(MAC_Add)) || (Name).equals(MAC_Add)) {
					check_register_house = 0;

				}

			}
			sqlConn.commit();

		} catch (SQLException ex) {

			ex.printStackTrace();
			sqlConn.rollback();
			return -1;
		}
		pt.close();
		if (check_register_house == 1) {
			// insert

			sql = "INSERT INTO Home(Name,MAC_Add) VALUES(?,?)";

			pt = sqlConn.prepareStatement(sql);
			pt.setString(1, Name);
			pt.setString(2, MAC_Add);

			pt.executeUpdate();
			sql = "SELECT ID FROM Home WHERE(Name =? AND MAC_Add =?)";
			pt = sqlConn.prepareStatement(sql);
			pt.setString(1, Name);
			pt.setString(2, MAC_Add);
			rs = pt.executeQuery();

			while (rs.next()) {
				Home_ID = rs.getInt(1);

				sql = "INSERT INTO HOME_MANAGE(Home_ID) VALUES(?)";
				pt = sqlConn.prepareStatement(sql);
				pt.setInt(1, Home_ID);
				pt.executeUpdate();

			}
			sqlConn.commit();
		}
		return Home_ID;

	}

	/*
	 * Update UserName
	 * 
	 * @return true if success
	 * 
	 * @return false if Fail
	 */
	public boolean update_User(String UserName, String ID) throws SQLException {
		int ID1 = Integer.parseInt(ID);
		PreparedStatement pst = null;
		int rs;
		try {
			;
			System.out.println(UserName);
			// System.out.println(PassWord);
			System.out.println(ID1);
			;
			sqlConn.setAutoCommit(false);
			String sql = " UPDATE Users " + " SET UserName = ? " + " WHERE ID=?";
			// String sql = " UPDATE Users " + " SET UserName = ? ," + " WHERE
			// UserName = ?";
			pst = sqlConn.prepareStatement(sql);

			pst.setString(1, UserName);
			// pst.setString(2, PassWord);
			pst.setInt(2, ID1);

			rs = pst.executeUpdate();

			sqlConn.commit();

		} catch (SQLException ex) {
			ex.printStackTrace();
			sqlConn.rollback();
			return false;

		}
		return true;
	}

	/*
	 * Update UserName base on PassWord
	 * 
	 * @return true if success
	 * 
	 * @return false if Fail
	 */
	/* test update user base on id */
	public boolean update(String UserName, String PassWord, String ID) throws SQLException {
		int ID1 = Integer.parseInt(ID);
		PreparedStatement pst = null;
		int rs;
		try {

			sqlConn.setAutoCommit(false);
			String sql = " UPDATE Users " + " SET UserName = ? , PassWord =?" + " WHERE ID = ?";
			// String sql = " UPDATE Users " + " SET UserName = ? ," + " WHERE
			// UserName = ?";
			pst = sqlConn.prepareStatement(sql);
			pst.setString(1, UserName);
			pst.setString(2, PassWord);
			pst.setInt(3, ID1);

			rs = pst.executeUpdate();
			sqlConn.commit();

		} catch (SQLException ex) {
			ex.printStackTrace();
			sqlConn.rollback();
			return false;

		}
		return true;
	}

	public boolean update_Password(String PassWord, String UserName) throws SQLException {
		PreparedStatement pst = null;
		int rs;
		try {

			sqlConn.setAutoCommit(false);
			String sql = " UPDATE Users " + " SET PassWord = ? " + " WHERE UserName = ?";
			// String sql = " UPDATE Users " + " SET UserName = ? ," + " WHERE
			// UserName = ?";
			pst = sqlConn.prepareStatement(sql);
			pst.setString(1, PassWord);
			pst.setString(2, UserName);
			rs = pst.executeUpdate();
			sqlConn.commit();

		} catch (SQLException ex) {
			ex.printStackTrace();
			sqlConn.rollback();
			return false;

		}
		return true;
	}

	/*
	 * Lay thong tin nguoi dung dua vao ID tra ve kieu JSON
	 */
	public int get_imf_User(String UserName) throws SQLException {

		try {
			PreparedStatement pst = null;
			ResultSet rs = null;
			sqlConn.setAutoCommit(false);
			String sql = "SELECT  ID,PassWord FROM Users WHERE UserName = ? ";
			pst = sqlConn.prepareStatement(sql);
			pst.setString(1, UserName);
			rs = pst.executeQuery();

			while (rs.next()) {
				int ID = rs.getInt(1);
				String PassWord = rs.getString(2);

				System.out.println("ID :" + ID);
				System.out.println("PassWord :" + PassWord);
				// JSONObject jsonObject = new JSONObject();
				// jsonObject.put("UserID", ID);
				// jsonObject.put("PassWord", PassWord);
				// jsonObject.toString();
				// client String
				String respond = "";
				JSONParser jsonParser = new JSONParser();
				JSONObject jsonObject;
				try {
					jsonObject = (JSONObject) jsonParser.parse(respond);
					jsonObject.get("UserID");
					jsonObject.get("PassWord");
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			rs.close();
			sqlConn.commit();

		} catch (SQLException ex) {
			ex.printStackTrace();
			return -1;

		}
		return 0;
	}

	/*--------Ham add_Home -------------*/
	public void add_Home(String UserName, String MAC_Add) throws SQLException {
		PreparedStatement pt = null;
		ResultSet rs = null;
		ResultSet rs1 = null;
		String sql;
		String sql1;
		String sql2;
		String sql3;
		int User_ID;
		int Home_ID;
		try {
			sqlConn.setAutoCommit(false);
			sql = "SELECT ID FROM Home WHERE(MAC_Add =? )";
			pt = sqlConn.prepareStatement(sql);
			pt.setString(1, MAC_Add);
			rs = pt.executeQuery();
			sql = "SELECT ID FROM Users WHERE(UserName =? )";
			pt = sqlConn.prepareStatement(sql);
			pt.setString(1, UserName);
			rs1 = pt.executeQuery();
			if (rs.next() && rs1.next()) {
				User_ID = rs1.getInt(1);
				Home_ID = rs.getInt(1);
				sql = "INSERT INTO HOME_MANAGE(Home_ID,User_ID) VALUES(?,?)";

				pt = sqlConn.prepareStatement(sql);
				pt.setInt(2, User_ID);
				pt.setInt(1, Home_ID);
				pt.executeUpdate();

			}
			rs.close();
			rs1.close();
			sqlConn.commit();

		} catch (SQLException ex) {
			ex.printStackTrace();

		}

	}

}

